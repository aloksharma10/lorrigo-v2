datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum ChargeType {
  FORWARD_CHARGE
  COD_CHARGE
  RTO_CHARGE
  FORWARD_EXCESS_WEIGHT
  RTO_EXCESS_WEIGHT
  COD_REVERSAL
}

enum Role {
  ADMIN
  SUBADMIN
  SELLER
  SALESPERSON
  SUPPORT
}

enum OrderType {
  B2C
  B2B
}

enum ShipmentStatus {
  NEW
  COURIER_ASSIGNED
  PICKUP_SCHEDULED
  OUT_FOR_PICKUP
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  NDR
  RTO_INITIATED
  RTO_IN_TRANSIT
  RTO_DELIVERED
  EXCEPTION
  CANCELLED_SHIPMENT
  CANCELLED_ORDER
  AWAITING
}

enum RemittanceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  ON_HOLD
}

enum BillingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  PREPAID
  WALLET
  CARD
  BANK_TRANSFER
  COD
  UPI
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  CREDIT
  DEBIT
  HOLD
  HOLD_RELEASE
}

enum WeightDisputeStatus {
  PENDING
  RAISED_BY_SELLER
  RESOLVED
  REJECTED
}

enum NotificationType {
  EMAIL
  WHATSAPP
  SYSTEM
}

enum CycleType {
  DAILY
  WEEKLY
  BI_WEEKLY
  FORTNIGHTLY
  MONTHLY
  CUSTOM
  MANUAL
}

enum DeliveryType {
  EXPRESS
  AIR
  SURFACE
}

enum ZoneLabel {
  Z_A
  Z_B
  Z_C
  Z_D
  Z_E
}

enum Channel {
  CUSTOM
  WEBSITE
  WHATSAPP
  INSTAGRAM
  FACEBOOK
  EMAIL
  SHOPIFY
}

enum AddressType {
  USER
  CUSTOMER
  SELLER
  HUB_ADDRESS
  HUB_RTO
}

enum LabelFormat {
  A4
  THERMAL
}


enum WalletType {
  WALLET
  REMITTANCE_WALLET
  POSTPAID
}

model User {
  id          String  @id @default(cuid())
  code        String  @unique // Format: US-YYMM-XXXXX
  email       String  @unique
  name        String
  password    String?
  phone       String
  role        Role    @default(SELLER)
  is_active   Boolean @default(true)
  is_verified Boolean @default(false)

  // OAuth and Passkey fields
  image        String? // Profile image from OAuth
  emailVerified DateTime?
  googleId     String? @unique
  hasPasskeys  Boolean @default(false)

  plan_id String?
  plan    Plan?   @relation(fields: [plan_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  address                      Address?                    @relation("UserAddress")
  profile                      UserProfile?
  wallet                       UserWallet?
  orders                       Order[]                     @relation("UserOrders")
  shipments                    Shipment[]                  @relation("UserShipments")
  hubs                         Hub[]                       @relation("UserHubs")
  weight_disputes              WeightDispute[]             @relation("UserWeightDisputes")
  api_requests                 ApiRequest[]
  billings                     UserBilling[]               @relation("UserBillings")
  shopify_connection           ShopifyConnection?
  bulk_operations              BulkOperation[]
  accounts                     Account[]
  sessions                     Session[]
  passkeys                     Passkey[]
  shipment_transactions        ShipmentTransaction[]
  invoice_transactions         InvoiceTransaction[]
  wallet_recharge_transactions WalletRechargeTransaction[]
  remittance_transactions      RemittanceTransaction[]
  invoices                     Invoice[]
  remittances                  Remittance[]
  user_bank_accounts           UserBankAccount[]

  @@index([email])
  @@index([code])
  @@index([phone, role, is_active])
  @@index([plan_id])
  @@index([googleId])
}

model UserProfile {
  id      String @id @default(cuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  wallet_type WalletType @default(WALLET)

  // KYC Details
  business_type String? @db.VarChar(50)
  pan           String? @db.VarChar(10)
  adhaar        String? @db.VarChar(12)
  gst_no        String? @db.VarChar(15)
  kyc_submitted Boolean @default(false)
  kyc_verified  Boolean @default(false)

  // Seller Config
  is_d2c          Boolean @default(true)
  is_b2b          Boolean @default(true)
  
  is_fw           Boolean @default(true)
  is_rto          Boolean @default(true)
  is_cod          Boolean @default(true)
  is_cod_reversal Boolean @default(true)

  // Notification Settings
  notification_settings Json // { whatsapp: true, email: true, system: true }
  

  // Company Details
  company      String? @db.VarChar(255)
  company_name String? @db.VarChar(255)
  logo_url     String? @db.VarChar(500)

  // Billing and Remittance Configuration
  remittance_cycle               CycleType     @default(WEEKLY)
  remittance_min_amount          Float         @default(0)
  remittance_days_of_week        Int[]         @default([5])
  remittance_days_after_delivery Int           @default(7)
  early_remittance_charge        Float         @default(0)
  ndr_boost                      Json?

  // Billing Cycle Configuration
  billing_cycle_type       CycleType @default(MONTHLY)
  billing_days_of_week     Int[]     @default([1]) // Day of week (0=Sunday, 1=Monday, etc.) for weekly
  billing_day_of_month     Int?      // Day of month (1-31) for monthly billing
  billing_week_of_month    Int?      // Week of month (1-4) for fortnightly
  billing_days             Int[]     @default([1, 15]) // Days for any cycle type (week days 0-6, month days 1-31)

  // Add label/manifest format config
  label_format    LabelFormat    @default(THERMAL)
  manifest_format LabelFormat    @default(THERMAL)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([billing_cycle_type])
}

model Customer {
  id    String  @id @default(cuid())
  name  String  @db.VarChar(100)
  email String? @db.VarChar(255)
  phone String  @unique @db.VarChar(15)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  address    Address?   @relation("CustomerAddresses")
  orders     Order[]    @relation("CustomerOrders")
  ndr_orders NDROrder[]

  @@index([phone, email])
}

model Address {
  id         String      @id @default(cuid())
  type       AddressType
  name       String?     @db.VarChar(100)
  address    String      @db.VarChar(255)
  address_2  String?     @db.VarChar(255)
  city       String      @db.VarChar(100)
  state      String      @db.VarChar(100)
  pincode    String      @db.VarChar(10)
  country    String      @default("India") @db.VarChar(50)
  is_default Boolean     @default(false)
  phone      String?     @db.VarChar(15)

  user_id String? @unique
  user    User?   @relation("UserAddress", fields: [user_id], references: [id], onDelete: Cascade)

  customer_id String?   @unique
  customer    Customer? @relation("CustomerAddresses", fields: [customer_id], references: [id], onDelete: Cascade)

  hub_primary Hub? @relation("HubPrimaryAddress")
  hub_rto     Hub? @relation("HubRTOAddress")

  order_seller_details OrderSellerDetails[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([pincode, city])
  @@index([type])
  @@index([customer_id])
}

model Hub {
  id                  String  @id @default(cuid())
  code                String  @unique // Format: HB-YYMM-XXXXX
  name                String  @db.VarChar(100)
  contact_person_name String  @db.VarChar(100)
  is_active           Boolean @default(true)
  phone               String
  is_rto_address_same Boolean @default(true)

  is_pickup_enabled  Boolean @default(true)
  is_rto_enabled     Boolean @default(true)
  is_cod_enabled     Boolean @default(true)
  is_prepaid_enabled Boolean @default(true)
  is_primary         Boolean @default(false)
  smart_ship_codes   Json // { surface: String, express: String, heavy: String }

  user_id String
  user    User   @relation("UserHubs", fields: [user_id], references: [id], onDelete: Cascade)

  address_id String  @unique
  address    Address @relation("HubPrimaryAddress", fields: [address_id], references: [id])

  rto_address_id String?  @unique
  rto_address    Address? @relation("HubRTOAddress", fields: [rto_address_id], references: [id], onDelete: Cascade)

  orders Order[] @relation("OrderHub")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id, is_active])
  @@index([code])
}

model OrderChannelConfig {
  id               String  @id @default(cuid())
  channel          Channel @default(CUSTOM)
  channel_order_id String? @db.VarChar(50)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  orders Order[]

  @@index([channel_order_id])
}

model Package {
  id String @id @default(cuid())

  weight            Float
  dead_weight       Float
  volumetric_weight Float
  length            Float
  breadth           Float
  height            Float

  order Order? @relation("OrderPackage")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Order {
  id               String        @id @default(cuid())
  code             String        @unique // Format: OR-YYMM-XXXXX
  order_number     String        @db.VarChar(50)
  type             OrderType     @default(B2C)
  payment_method   PaymentMethod @default(COD)
  is_reverse_order Boolean       @default(false)

  order_channel_config_id String
  order_channel_config    OrderChannelConfig @relation(fields: [order_channel_config_id], references: [id])
  order_reference_id      String?
  ewaybill                String?            @db.VarChar(12)
  total_amount            Float
  amount_to_collect       Float?
  applicable_weight       Float

  order_invoice_date   DateTime? @default(now())
  order_invoice_number String?   @db.VarChar(50)

  // Remittance and dispute tracking
  remittanceId String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id     String
  user        User     @relation("UserOrders", fields: [user_id], references: [id], onDelete: Cascade)
  customer_id String
  customer    Customer @relation("CustomerOrders", fields: [customer_id], references: [id], onDelete: Cascade)
  hub_id      String?
  hub         Hub?     @relation("OrderHub", fields: [hub_id], references: [id])

  seller_details_id String
  seller_details    OrderSellerDetails @relation(fields: [seller_details_id], references: [id])

  package_id String  @unique
  package    Package @relation("OrderPackage", fields: [package_id], references: [id])

  items          OrderItem[]
  invoice        Invoice?       @relation("OrderInvoice")
  shipment       Shipment?      @relation("OrderShipment")
  weight_dispute WeightDispute? @relation("OrderWeightDispute")
  remittance     Remittance?    @relation(fields: [remittanceId], references: [id])
  billings       Billing[]
  ndr            NDROrder?      @relation("OrderNDR")

  freight_type   Int? @default(0)
  pickup_type    Int? @default(0)
  insurance_type Int? @default(0)

  @@unique([order_number, user_id])
  @@index([user_id, customer_id])
  @@index([created_at(sort: Desc)])
  @@index([code])
  @@index([order_number, order_reference_id, ewaybill], map: "order_global_search_idx")
  @@index([remittanceId])
}

model OrderSellerDetails {
  id String @id @default(cuid())

  seller_name    String? @db.VarChar(100)
  gst_no         String? @db.VarChar(15)
  contact_number String? @db.VarChar(15)

  order Order[]

  address_id String?
  address    Address? @relation(fields: [address_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OrderItem {
  id            String  @id @default(cuid())
  code          String  @unique // Format: OI-YYMM-XXXXX
  order_id      String
  order         Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  name          String? @db.VarChar(255)
  sku           String? @db.VarChar(50)
  units         Int?    @default(1)
  selling_price Float?
  discount      Float?  @default(0)
  tax           Float?  @default(0)
  hsn           String? @db.VarChar(8)
  image_url     String[]

  // B2C Specific
  length  Float?
  breadth Float?
  height  Float?
  weight  Float?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  ndr_order_id String?
  ndr_order    NDROrder? @relation("NDROrderItems", fields: [ndr_order_id], references: [id])

  @@index([order_id])
  @@index([code])
  @@index([sku])
}

model Shipment {
  id     String         @id @default(cuid())
  code   String         @unique // Format: SH-YYMM-XXXXX
  awb    String?        @unique @db.VarChar(50)
  status ShipmentStatus @default(NEW)
  bucket Int?           @default(0)

  shipping_charge Float?     @default(0)
  fw_charge       Float?     @default(0)
  cod_charge      Float?     @default(0)
  rto_charge      Float?     @default(0)
  order_zone      ZoneLabel?
  edd             DateTime?
  pickup_date     DateTime?
  pickup_id       String?
  routing_code    String?
  cancel_reason   String?
  is_reshipped    Boolean    @default(false)
  sr_shipment_id  String?    @db.VarChar(50)

  delivered_date     DateTime?
  rto_delivered_date DateTime?
  picked_up_date     DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order_id String @unique
  order    Order  @relation("OrderShipment", fields: [order_id], references: [id], onDelete: Cascade)

  user_id               String
  user                  User                  @relation("UserShipments", fields: [user_id], references: [id], onDelete: Cascade)
  courier_id            String?
  courier               Courier?              @relation(fields: [courier_id], references: [id], onDelete: Cascade)
  ndr                   NDROrder?             @relation("ShipmentNDR")
  tracking_events       TrackingEvent[]
  pricing               ShipmentPricing?
  shipment_transactions ShipmentTransaction[]

  @@index([order_id, user_id, courier_id, status])
  @@index([awb])
  @@index([code])
  @@index([sr_shipment_id])
}

model TrackingEvent {
  id                  String   @id @default(cuid())
  status              String
  action              String?  @db.VarChar(100)
  location            String?  @db.VarChar(100)
  description         String?  @db.VarChar(255)
  status_code         String?  @db.VarChar(100)
  vendor_name         String?  @db.VarChar(100)
  vendor_status_code  String?  @db.VarChar(100)
  vendor_status_label String?  @db.VarChar(100)
  raw_data            Json?
  shipment_id         String
  shipment            Shipment @relation(fields: [shipment_id], references: [id], onDelete: Cascade)
  is_rto              Boolean  @default(false)
  bucket              Int?     @default(0)
  timestamp           DateTime @default(now())
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@index([shipment_id, timestamp])
}

model ChannelConfig {
  id         String   @id @default(cuid())
  name       String   @unique @db.VarChar(100)
  nickname   String   @unique @db.VarChar(10)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  couriers Courier[]
}

model Courier {
  id           String  @id @default(cuid())
  name         String  @db.VarChar(100)
  courier_code String? @db.VarChar(50)

  cod_charge_hard    Float? @default(40)
  cod_charge_percent Float? @default(1.5)

  is_active           Boolean @default(true)
  is_reversed_courier Boolean @default(false)
  is_recommended      Boolean @default(false)

  weight_slab      Float?
  weight_unit      String? @db.VarChar(10)
  increment_weight Float?

  type        DeliveryType @default(SURFACE)
  pickup_time String?      @db.VarChar(50)

  api_credentials Json?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  shipments     Shipment[]
  plan_pricings PlanCourierPricing[]
  ndr_orders    NDROrder[]

  channel_config_id String
  channel_config    ChannelConfig @relation(fields: [channel_config_id], references: [id])

  @@unique([name, channel_config_id, is_reversed_courier, courier_code])
  @@index([courier_code, is_active])
}

model UserWallet {
  id                    String                      @id @default(cuid())
  code                  String                      @unique // Format: WL-YYMM-XXXXX
  balance               Float                       @default(0) // Total balance : usable_amount + hold_amount
  hold_amount           Float                       @default(0) // Amount on hold : Disputed amount
  available_amount      Float                       @default(0) // Total available amount : remittance amount
  usable_amount         Float                       @default(0) // Amount available for use : balance + max_negative_amount - hold_amount 
  max_negative_amount   Float                       @default(0) // Maximum negative balance allowed
  user_id               String                      @unique
  user                  User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shipment_transactions ShipmentTransaction[]
  invoice_transactions  InvoiceTransaction[]
  wallet_transactions   WalletRechargeTransaction[]
  remittance_transactions RemittanceTransaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([code])
}

model ShipmentTransaction {
  id                      String            @id @default(cuid())
  code                    String             // Format: ST-YYMM-XXXXX
  before_balance          Float             @default(0)
  after_balance           Float             @default(0)
  amount                  Float             @default(0)
  type                    String            @db.VarChar(20) // CREDIT, DEBIT
  description             String            @db.VarChar(255)
  status                  TransactionStatus @default(PENDING)
  merchant_transaction_id String?           @unique @db.VarChar(50)
  currency                String            @default("INR") @db.VarChar(3)
  awb                     String?           @db.VarChar(50)
  sr_shipment_id          String?           @db.VarChar(50)
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  wallet_type WalletType @default(WALLET)

  wallet_id String
  wallet    UserWallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  shipment_id String
  shipment    Shipment @relation(fields: [shipment_id], references: [id], onDelete: Cascade)

  transaction_id String?
  transaction    Transaction? @relation(fields: [transaction_id], references: [id])

  charge_type ChargeType @default(FORWARD_CHARGE)

  @@unique([shipment_id, awb, charge_type, type])
  @@index([wallet_id, user_id, status, created_at])
  @@index([merchant_transaction_id])
  @@index([awb])
  @@index([sr_shipment_id])
  @@index([code])
}

model InvoiceTransaction {
  id                      String            @id @default(cuid())
  code                    String            @unique // Format: IT-YYMM-XXXXX
  before_balance          Float             @default(0)
  after_balance           Float             @default(0)
  amount                  Float             @default(0)
  type                    String            @db.VarChar(20) // CREDIT, DEBIT
  description             String            @db.VarChar(255)
  status                  TransactionStatus @default(PENDING)
  merchant_transaction_id String?           @unique @db.VarChar(50)
  currency                String            @default("INR") @db.VarChar(3)
  invoice_number          String?           @db.VarChar(50)
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  wallet_type WalletType @default(WALLET)

  wallet_id String
  wallet    UserWallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  invoice_id String
  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  transaction_id String?
  transaction    Transaction? @relation(fields: [transaction_id], references: [id])

  @@index([wallet_id, user_id, status, created_at])
  @@index([merchant_transaction_id])
  @@index([invoice_number])
  @@index([code])
}

model WalletRechargeTransaction {
  id                      String            @id @default(cuid())
  code                    String            @unique // Format: WT-YYMM-XXXXX
  before_balance          Float             @default(0)
  after_balance           Float             @default(0)
  amount                  Float             @default(0)
  type                    String            @db.VarChar(20) // CREDIT, DEBIT
  description             String            @db.VarChar(255)
  status                  TransactionStatus @default(PENDING)
  merchant_transaction_id String?           @unique @db.VarChar(50)
  currency                String            @default("INR") @db.VarChar(3)
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  wallet_type WalletType @default(WALLET)

  wallet_id String
  wallet    UserWallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  transaction_id String?
  transaction    Transaction? @relation(fields: [transaction_id], references: [id])

  @@index([wallet_id, user_id, status, created_at])
  @@index([merchant_transaction_id])
  @@index([code])
}

model RemittanceTransaction {
  id                      String            @id @default(cuid())
  code                    String            @unique // Format: RT-YYMM-XXXXX
  before_balance          Float             @default(0)
  after_balance           Float             @default(0)
  amount                  Float             @default(0)
  type                    String            @db.VarChar(20) // CREDIT, DEBIT
  description             String            @db.VarChar(255)
  status                  TransactionStatus @default(PENDING)
  merchant_transaction_id String?           @unique @db.VarChar(50)
  currency                String            @default("INR") @db.VarChar(3)
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  wallet_type WalletType @default(WALLET)

  wallet_id String
  wallet    UserWallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  remittance_id String
  remittance    Remittance @relation(fields: [remittance_id], references: [id], onDelete: Cascade)

  transaction_id String?
  transaction    Transaction? @relation(fields: [transaction_id], references: [id])

  @@index([wallet_id, user_id, status, created_at])
  @@index([merchant_transaction_id])
  @@index([code])
  @@index([remittance_id])
}

model Transaction {
  id                String            @id @default(cuid())
  code              String            @unique // Format: PY-YYMM-XXXXX
  amount            Float
  method            PaymentMethod
  status            TransactionStatus @default(PENDING)
  gateway_reference String?           @db.VarChar(50)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  shipment_transactions ShipmentTransaction[]
  invoice_transactions  InvoiceTransaction[]
  wallet_transactions   WalletRechargeTransaction[]
  remittance_transactions RemittanceTransaction[]

  @@index([status])
  @@index([code])
  @@index([gateway_reference])
}

model Invoice {
  id             String    @id @default(cuid())
  code           String    @unique // Format: INV-YYMM-XXXXX
  invoice_number String    @db.VarChar(50)
  amount         Float
  tax_amount     Float?    @default(0)
  due_date       DateTime?
  is_paid        Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  user_id  String
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_id String @unique
  order    Order  @relation("OrderInvoice", fields: [order_id], references: [id], onDelete: Cascade)

  invoice_transactions InvoiceTransaction[]

  @@unique([order_id, invoice_number])
  @@index([user_id, invoice_number])
  @@index([code])
}

model Billing {
  id       String  @id @default(cuid())
  code     String  @unique // Format: BL-YYMM-XXXXX
  order_id String
  order    Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  awb      String?

  billing_date  DateTime
  billing_month String   @db.VarChar(7) // Format: YYYY-MM

  charged_weight     Float
  original_weight    Float
  weight_difference  Float   @default(0)
  has_weight_dispute Boolean @default(false)

  fw_excess_charge      Float   @default(0)
  rto_excess_charge     Float   @default(0)
  zone_change_charge    Float   @default(0)
  cod_charge            Float   @default(0)
  fw_charge             Float   @default(0)
  rto_charge            Float   @default(0)
  is_forward_applicable Boolean
  is_rto_applicable     Boolean

  is_fw_billed           Boolean @default(true)
  is_rto_billed          Boolean @default(false)
  is_cod_billed          Boolean @default(false)
  is_cod_reversal_billed Boolean @default(false)
  is_rto_billed_reversal Boolean @default(false)
  is_fw_excess_billed    Boolean @default(false)
  is_rto_excess_billed   Boolean @default(false)

  // Amount
  pending_amount  Float @default(0)
  disputed_amount Float @default(0)
  paid_amount     Float @default(0)
  billing_amount  Float

  base_price      Float
  base_weight     Float
  increment_price Float @default(0)

  order_weight Float
  order_zone   String?
  charged_zone String?
  courier_name String?

  // Billing Cycle Information
  billing_cycle_id  String?
  billing_cycle     UserBilling?  @relation(fields: [billing_cycle_id], references: [id])
  cycle_type        CycleType     @default(MONTHLY)
  is_manual_billing Boolean       @default(false)
  payment_status    BillingStatus @default(PENDING)

  admin_notes String?   @db.Text
  approved_by String?
  approved_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([billing_month, order_id])
  @@index([order_id, billing_date])
  @@index([billing_cycle_id])
  @@index([has_weight_dispute])
  @@index([awb])
  @@index([code])
}

model Remittance {
  id              String           @id @default(cuid())
  code            String           @unique // Format: RM-YYMM-XXXXX
  transaction_id  String           @unique // Format: RT-YYMM-XXXXX
  amount          Float
  status          RemittanceStatus @default(PENDING)
  remittance_date DateTime
  cycle_type      CycleType        @default(WEEKLY)

  amount_before_adjustment       Float? @default(0)
  wallet_transfer_amount         Float? @default(0)
  wallet_balance_before          Float? @default(0)
  wallet_balance_after           Float? @default(0)
  early_remittance_charge        Float  @default(0)
  early_remittance_charge_amount Float  @default(0)
  final_payout_amount            Float? @default(0)

  remittance_cycle_date String?

  orders_count       Int
  processing_details Json?
  hold_reason        String?   @db.Text
  processed_at       DateTime?
  completed_at       DateTime?
  failed_at          DateTime?

  // Bank transaction details
  bank_transaction_id   String? // External bank transaction ID
  bank_transaction_date DateTime?

  created_by String
  updated_by String?
  notes      String? @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  bank_account_id String?
  bank_account    UserBankAccount? @relation(fields: [bank_account_id], references: [id], onDelete: Restrict)

  orders Order[]
  remittance_transactions RemittanceTransaction[]

  // Removed order_id and order relation for multi-order support

  @@index([user_id, status, remittance_date])
  @@index([transaction_id])
  @@index([code])
  @@index([bank_account_id])
  @@index([bank_transaction_id])
}

model Notification {
  id           String           @id @default(cuid())
  code         String           @unique // Format: NT-YYMM-XXXXX
  type         NotificationType
  title        String           @db.VarChar(100)
  content      String           @db.Text
  is_read      Boolean          @default(false)
  recipient_id String
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt

  @@index([recipient_id, is_read, created_at])
  @@index([code])
}

model ApiRequest {
  id              String   @id @default(cuid())
  endpoint        String   @db.VarChar(255)
  method          String   @db.VarChar(10)
  ip_address      String   @db.VarChar(45)
  user_id         String?
  user            User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  response_status Int?
  response_time   Int?
  timestamp       DateTime @default(now())

  @@index([user_id, endpoint, timestamp])
}

model BulkOperation {
  id              String   @id @default(uuid())
  type            String
  status          String
  code            String   @unique
  user_id         String
  total_count     Int      @default(0)
  processed_count Int      @default(0)
  success_count   Int      @default(0)
  failed_count    Int      @default(0)
  results         String?  @db.Text
  report_path     String?
  file_path       String?
  error_message   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([type])
  @@index([status])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Enhanced session tracking
  ipAddress    String?  @db.VarChar(45)
  userAgent    String?  @db.Text
  deviceType   String?  @db.VarChar(50) // mobile, desktop, tablet
  browser      String?  @db.VarChar(100)
  os           String?  @db.VarChar(100)
  country      String?  @db.VarChar(100)
  city         String?  @db.VarChar(100)
  region       String?  @db.VarChar(100)
  latitude     Float?
  longitude    Float?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  loginMethod  String   @default("credentials") // credentials, google, passkey
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([ipAddress])
  @@index([isActive])
  @@index([lastActivity])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pincode {
  id       String @id @default(cuid())
  pincode  String @unique
  city     String
  state    String
  district String
  country  String @default("India")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([pincode])
}

model Plan {
  id          String   @id @default(cuid())
  code        String   @unique // Format: PL-YYMM-XXXXX
  name        String   @unique @db.VarChar(100)
  description String?  @db.VarChar(255)
  isDefault   Boolean  @default(false)
  features    String[] @default([])

  is_active Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  plan_courier_pricings PlanCourierPricing[]
  users                 User[]

  @@index([isDefault])
  @@index([code])
}

model PlanCourierPricing {
  id String @id @default(cuid())

  cod_charge_hard    Float? @default(40)
  cod_charge_percent Float? @default(1.5)

  is_fw_applicable           Boolean @default(true)
  is_rto_applicable          Boolean @default(true)
  is_cod_applicable          Boolean @default(true)
  is_cod_reversal_applicable Boolean @default(true)

  weight_slab      Float @default(0.5)
  increment_weight Float @default(0.5)
  increment_price  Float @default(0)

  zone_pricing ZonePricing[]

  plan_id    String
  plan       Plan    @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  courier_id String
  courier    Courier @relation(fields: [courier_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([plan_id, courier_id])
  @@index([courier_id])
}

model ZonePricing {
  id                  String    @id @default(cuid())
  zone                ZoneLabel
  base_price          Float
  increment_price     Float
  is_rto_same_as_fw   Boolean
  rto_base_price      Float
  rto_increment_price Float
  flat_rto_charge     Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  plan_courier_pricing_id String
  plan_courier_pricing    PlanCourierPricing @relation(fields: [plan_courier_pricing_id], references: [id])

  @@unique([plan_courier_pricing_id, zone])
  @@index([zone])
}

model ShipmentPricing {
  id                 String   @id @default(cuid())
  shipment_id        String   @unique
  shipment           Shipment @relation(fields: [shipment_id], references: [id])
  cod_charge_hard    Float?   @default(40)
  cod_charge_percent Float?   @default(1.5)

  is_fw_applicable           Boolean @default(true)
  is_rto_applicable          Boolean @default(true)
  is_cod_applicable          Boolean @default(true)
  is_cod_reversal_applicable Boolean @default(true)

  weight_slab      Float @default(0.5)
  increment_weight Float @default(0.5)
  increment_price  Float @default(0)

  zone                ZoneLabel
  base_price          Float
  is_rto_same_as_fw   Boolean
  rto_base_price      Float
  rto_increment_price Float
  flat_rto_charge     Float

  courier_other_zone_pricing ShipmentCourierZonePricing[] @relation("CourierOtherZonePricing")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ShipmentCourierZonePricing {
  id                  String    @id @default(cuid())
  zone                ZoneLabel
  base_price          Float
  increment_price     Float
  is_rto_same_as_fw   Boolean
  rto_base_price      Float
  rto_increment_price Float
  flat_rto_charge     Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  shipment_pricing_id String?
  shipment_pricing    ShipmentPricing? @relation("CourierOtherZonePricing", fields: [shipment_pricing_id], references: [id])

  @@index([zone])
}

model CourierStatusMapping {
  id                 String  @id @default(cuid())
  courier_name       String  @db.VarChar(100)
  status_code        String  @db.VarChar(50)
  status_label       String  @db.VarChar(100)
  status_description String? @db.VarChar(255)
  bucket             Int
  is_active          Boolean @default(true)
  is_mapped          Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([courier_name, status_code])
  @@index([courier_name, bucket])
}

model UnmappedCourierStatus {
  id           String   @id @default(cuid())
  courier      String   @db.VarChar(100)
  status_code  String   @db.VarChar(50)
  status_label String?  @db.VarChar(100)
  count        Int      @default(1)
  last_seen    DateTime @default(now())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([courier, status_code])
  @@index([courier])
}

model ShopifyConnection {
  id           String   @id @default(cuid())
  shop         String   @db.VarChar(255)
  access_token String   @db.Text
  scope        String   @db.Text
  user_id      String   @unique
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  connected_at DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([user_id])
  @@index([shop])
}

model NDROrder {
  id          String    @id @default(cuid())
  order_id    String?   @unique
  order       Order?    @relation("OrderNDR", fields: [order_id], references: [id], onDelete: Cascade)
  shipment_id String?   @unique
  shipment    Shipment? @relation("ShipmentNDR", fields: [shipment_id], references: [id], onDelete: Cascade)
  customer_id String
  customer    Customer  @relation(fields: [customer_id], references: [id])

  courier_id String?
  courier    Courier? @relation(fields: [courier_id], references: [id])

  cancellation_reason String?
  attempts            Int       @default(1)
  ndr_raised_at       DateTime?
  awb                 String    @unique

  product_items OrderItem[] @relation("NDROrderItems")

  delivered_date String?

  action_taken   Boolean   @default(false)
  action_type    String?
  action_date    DateTime?
  action_comment String?
  otp_verified   Boolean   @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  ndr_history NDRHistory[]

  @@index([order_id])
  @@index([shipment_id])
  @@index([awb])
  @@index([ndr_raised_at])
  @@index([action_taken])
}

model NDRHistory {
  id              String    @id @default(cuid())
  ndr_id          String
  ndr             NDROrder  @relation(fields: [ndr_id], references: [id], onDelete: Cascade)
  ndr_reason      String?
  action_by       Int?
  ndr_attempt     Int?
  ndr_push_status Int?
  comment         String?
  call_recording  String?
  recording_date  String?
  proof_recording String?
  proof_image     String?
  sms_response    String?
  ndr_raised_at   DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@index([ndr_id])
}

model WeightDispute {
  id         String @id @default(cuid())
  dispute_id String @unique // Format: WD-YYMM-XXXXX
  order_id   String @unique
  order      Order  @relation("OrderWeightDispute", fields: [order_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User   @relation("UserWeightDisputes", fields: [user_id], references: [id], onDelete: Cascade)

  charged_order_box_height Float?
  charged_order_box_width  Float?
  charged_order_box_length Float?
  charged_order_size_unit  String?

  original_weight Float
  disputed_weight Float
  final_weight    Float?

  status           WeightDisputeStatus @default(PENDING)
  original_charges Float
  revised_charges  Float?

  dispute_raised_at    DateTime  @default(now())
  deadline_date        DateTime?
  notification_sent_at DateTime?
  auto_resolved_at     DateTime?
  seller_action_taken  Boolean   @default(false)
  seller_response      String?   @db.Text
  seller_evidence_urls String[]  @default([])

  forward_excess_amount Float   @default(0)
  rto_excess_amount     Float   @default(0)
  total_disputed_amount Float   @default(0)
  wallet_hold_applied   Boolean @default(false)

  evidence_urls    String[]  @default([])
  courier_name     String    @db.VarChar(100)
  courier_response String?   @db.Text
  resolution       String?   @db.Text
  resolution_date  DateTime?
  resolved_by      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([order_id])
  @@index([user_id])
  @@index([dispute_id])
  @@index([status])
}

model UserBilling {
  id      String @id @default(cuid())
  code    String // Custom ID
  user_id String
  user    User   @relation("UserBillings", fields: [user_id], references: [id], onDelete: Cascade)

  // Cycle Configuration
  cycle_type       CycleType @default(MONTHLY)
  cycle_days       Int       @default(30) // Number of days in cycle
  cycle_start_date DateTime
  cycle_end_date   DateTime

  // Status
  status    BillingStatus @default(PENDING)
  is_active Boolean       @default(true)

  // Processing Information
  total_orders     Int   @default(0)
  total_amount     Float @default(0)
  processed_orders Int   @default(0)
  failed_orders    Int   @default(0)

  // Relations
  billings Billing[] // Related billing records

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([code, user_id])
  @@index([user_id])
  @@index([cycle_type])
  @@index([status])
  @@index([cycle_start_date, cycle_end_date])
}

model Passkey {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID      String   @unique
  publicKey         String   @db.Text
  counter           Int      @default(0)
  transports        String[] // ["usb", "nfc", "ble", "internal"]
  backupEligible    Boolean  @default(false)
  backupState       Boolean  @default(false)
  deviceType        String?  @db.VarChar(50)
  createdAt         DateTime @default(now())
  lastUsedAt        DateTime @default(now())

  @@index([userId])
  @@index([credentialID])
}

model UserBankAccount {
  id                         String    @id @default(cuid())
  user_id                    String
  user                       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account_number             String // Masked for display, full for processing
  ifsc                       String
  bank_name                  String
  account_holder             String
  is_verified                Boolean   @default(false)
  verified_by                String?
  verified_at                DateTime?
  is_selected_for_remittance Boolean   @default(false) // User selected this account for remittance
  created_at                 DateTime  @default(now())
  updated_at                 DateTime  @updatedAt

  remittances Remittance[]

  @@unique([user_id, account_number])
  @@index([user_id])
  @@index([is_verified, is_selected_for_remittance])
}
